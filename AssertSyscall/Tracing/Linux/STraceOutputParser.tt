<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssertSyscall.Tracing.Linux;

internal partial class STraceOutputParser
{
    static STraceOutputParser()
    {
<#
var lines = File.ReadAllLines(Host.ResolvePath("../../../Functions/linux-functions.txt"));

foreach (var line in lines.Skip(1))
{
    var cells = line.Split('\t');
    var category = cells[0];
    var type = cells[1];
    var alias = cells[2];
    var func = cells[3];
    var parameters = cells[4].Trim('"').Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
    var transforms = cells[5].Trim('"').Replace("\"\"", "\"").Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

    var funcParams = new StringBuilder("new FuncParams()");

    for (var i = 0; i < parameters.Length; ++i)
    {
        var param = parameters[i];

        if (i < transforms.Length)
        {
            var transform = transforms[i];
            funcParams.AppendFormat(".Add(\"{0}\", v => v.{1})", param, transform);
        }
        else
        {
            funcParams.AppendFormat(".Add(\"{0}\", v => v.Arg({1}))", param, i);
        }
    }
#>
        KnownFunctions["<#= func #>"] = new(SyscallCategory.<#= category #>, SyscallType.<#= type #>, "<#= alias #>", <#= funcParams #>);
<#
}
#>
    }
}
